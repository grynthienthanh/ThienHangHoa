// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XNHH.Data;

namespace XNHH.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication1.Models.BAO_CAO_CONG_NO", b =>
                {
                    b.Property<int>("MaBCN")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaKH");

                    b.Property<int?>("NoCuoi");

                    b.Property<int?>("NoDau");

                    b.Property<int?>("PhatSinh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Thang");

                    b.HasKey("MaBCN");

                    b.HasIndex("MaKH");

                    b.ToTable("BAO_CAO_CONG_NO");
                });

            modelBuilder.Entity("WebApplication1.Models.BAO_CAO_TON", b =>
                {
                    b.Property<int>("MaBCTon")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MANCC");

                    b.Property<int>("MaMH");

                    b.Property<int?>("PhatSinh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Thang");

                    b.Property<int?>("TonCuoi");

                    b.Property<int?>("TonDau");

                    b.HasKey("MaBCTon");

                    b.HasIndex("MANCC");

                    b.HasIndex("MaMH");

                    b.ToTable("BAO_CAO_TON");
                });

            modelBuilder.Entity("WebApplication1.Models.CT_DH_NHAP", b =>
                {
                    b.Property<int>("MaCTHDN")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaHD");

                    b.Property<int>("MaHDN");

                    b.Property<int>("MaMH");

                    b.Property<int?>("SoLuongNhap");

                    b.Property<int?>("ThanhTien");

                    b.HasKey("MaCTHDN");

                    b.HasIndex("MaHD");

                    b.HasIndex("MaMH");

                    b.ToTable("CT_DH_NHAP");
                });

            modelBuilder.Entity("WebApplication1.Models.CT_HD_XUAT", b =>
                {
                    b.Property<int>("MaCTHDX")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaHDX");

                    b.Property<int>("MaMH");

                    b.Property<int?>("SoLuongXuat");

                    b.Property<int?>("ThanhTien");

                    b.HasKey("MaCTHDX");

                    b.HasIndex("MaHDX");

                    b.HasIndex("MaMH");

                    b.ToTable("CT_HD_XUAT");
                });

            modelBuilder.Entity("WebApplication1.Models.HD_NHAP", b =>
                {
                    b.Property<int>("MaHDN")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaNCC");

                    b.Property<DateTime?>("Ngay");

                    b.Property<int?>("SoHDNhap");

                    b.Property<int?>("TongTienNhap");

                    b.HasKey("MaHDN");

                    b.ToTable("HD_NHAP");
                });

            modelBuilder.Entity("WebApplication1.Models.HD_XUAT", b =>
                {
                    b.Property<int>("MaHDX")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaKH");

                    b.Property<DateTime>("Ngay");

                    b.Property<int?>("PhiVanCHuyen");

                    b.Property<int>("SoHDX");

                    b.Property<int?>("TongCong");

                    b.Property<int?>("TongTien");

                    b.HasKey("MaHDX");

                    b.HasIndex("MaKH");

                    b.ToTable("HD_XUAT");
                });

            modelBuilder.Entity("WebApplication1.Models.KHACH_HANG", b =>
                {
                    b.Property<int>("MaKH")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiaChi")
                        .HasMaxLength(100);

                    b.Property<string>("SDT")
                        .HasMaxLength(20);

                    b.Property<string>("TenKH");

                    b.Property<decimal>("TienNo");

                    b.HasKey("MaKH");

                    b.ToTable("KHACH_HANG");
                });

            modelBuilder.Entity("WebApplication1.Models.MAT_HANG", b =>
                {
                    b.Property<int>("MaMH")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DonGiaXuat");

                    b.Property<int?>("SoLuongTon");

                    b.Property<string>("TenMH")
                        .HasMaxLength(70);

                    b.HasKey("MaMH");

                    b.ToTable("MAT_HANG");
                });

            modelBuilder.Entity("WebApplication1.Models.NCC_HANG_NHAP", b =>
                {
                    b.Property<int>("MaNCCHangNhap")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DonGiaNhap");

                    b.Property<int>("MaMH");

                    b.Property<int>("MaNCC")
                        .HasMaxLength(5);

                    b.Property<int?>("SoLuongTon");

                    b.HasKey("MaNCCHangNhap");

                    b.HasIndex("MaMH");

                    b.HasIndex("MaNCC");

                    b.ToTable("NCC_HANG_NHAP");
                });

            modelBuilder.Entity("WebApplication1.Models.NHA_CUNG_CAP", b =>
                {
                    b.Property<int>("MaNCC")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiaChi")
                        .HasMaxLength(200);

                    b.Property<string>("TenNCC")
                        .HasMaxLength(200);

                    b.HasKey("MaNCC");

                    b.ToTable("NHA_CUNG_CAP");
                });

            modelBuilder.Entity("WebApplication1.Models.PHIEU_THU_TIEN", b =>
                {
                    b.Property<int>("MaPTT")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaKH");

                    b.Property<DateTime?>("NgayThuTien");

                    b.Property<int>("SoTienThu");

                    b.HasKey("MaPTT");

                    b.HasIndex("MaKH");

                    b.ToTable("PHIEU_THU_TIEN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.BAO_CAO_CONG_NO", b =>
                {
                    b.HasOne("WebApplication1.Models.KHACH_HANG", "KHACH_HANG")
                        .WithMany("BAO_CAO_CONG_NO")
                        .HasForeignKey("MaKH")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.BAO_CAO_TON", b =>
                {
                    b.HasOne("WebApplication1.Models.NHA_CUNG_CAP", "NHA_CUNG_CAP")
                        .WithMany("BAO_CAO_TON")
                        .HasForeignKey("MANCC")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.MAT_HANG", "MAT_HANG")
                        .WithMany("BAO_CAO_TON")
                        .HasForeignKey("MaMH")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.CT_DH_NHAP", b =>
                {
                    b.HasOne("WebApplication1.Models.HD_NHAP", "HD_NHAP")
                        .WithMany("CT_DH_NHAP")
                        .HasForeignKey("MaHD");

                    b.HasOne("WebApplication1.Models.MAT_HANG", "MAT_HANG")
                        .WithMany("CT_DH_NHAP")
                        .HasForeignKey("MaMH")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.CT_HD_XUAT", b =>
                {
                    b.HasOne("WebApplication1.Models.HD_XUAT", "HD_XUAT")
                        .WithMany("CT_HD_XUAT")
                        .HasForeignKey("MaHDX")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.MAT_HANG", "MAT_HANG")
                        .WithMany("CT_HD_XUAT")
                        .HasForeignKey("MaMH")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.HD_XUAT", b =>
                {
                    b.HasOne("WebApplication1.Models.KHACH_HANG", "KHACH_HANG")
                        .WithMany("HD_XUAT")
                        .HasForeignKey("MaKH")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.NCC_HANG_NHAP", b =>
                {
                    b.HasOne("WebApplication1.Models.MAT_HANG", "MAT_HANG")
                        .WithMany("NCC_HANG_NHAP")
                        .HasForeignKey("MaMH")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.NHA_CUNG_CAP", "NHA_CUNG_CAP")
                        .WithMany("NCC_HANG_NHAP")
                        .HasForeignKey("MaNCC")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.PHIEU_THU_TIEN", b =>
                {
                    b.HasOne("WebApplication1.Models.KHACH_HANG", "KHACH_HANG")
                        .WithMany("PHIEU_THU_TIEN")
                        .HasForeignKey("MaKH")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
